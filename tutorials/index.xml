<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on MySqlConnector: Async MySQL Driver for .NET and .NET Core</title>
    <link>https://mysql-net.github.io/MySqlConnector/tutorials/</link>
    <description>Recent content in Tutorials on MySqlConnector: Async MySQL Driver for .NET and .NET Core</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 05 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mysql-net.github.io/MySqlConnector/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic API</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/basic-api/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/basic-api/</guid>
      <description>Basic API MySqlConnector aims to be fully ADO.NET-compatible; its API should feel almost identical to other .NET database drivers. Here’s a basic code snippet to get you started.
var connString = &amp;quot;Server=myserver;User ID=mylogin;Password=mypass;Database=mydatabase&amp;quot;; using (var conn = new MySqlConnection(connString)) { await conn.OpenAsync(); // Insert some data using (var cmd = new MySqlCommand()) { cmd.Connection = conn; cmd.CommandText = &amp;quot;INSERT INTO data (some_field) VALUES (@p)&amp;quot;; cmd.Parameters.AddWithValue(&amp;quot;p&amp;quot;, &amp;quot;Hello world&amp;quot;); await cmd.ExecuteNonQueryAsync(); } // Retrieve all rows using (var cmd = new MySqlCommand(&amp;quot;SELECT some_field FROM data&amp;quot;, conn)) using (var reader = await cmd.</description>
    </item>
    
    <item>
      <title>Best Practices</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/best-practices/</guid>
      <description>Best Practices Asynchronous Operation MySqlConnector is fully asynchronous, supporting the async ADO.NET methods added in .NET 4.5 without blocking or using Task.Run to run synchronous methods on a background thread. Programmers implementing MySqlConnector should be familiar with Async/Await - Best Practices in Asynchronous Programming.
Always Use Async when possible  ADO.NET Class Asynchronous Method
(always use when possible) Synchronous Method
(avoid when possible)   DbConnection  OpenAsync Open    *MySqlConnection.</description>
    </item>
    
    <item>
      <title>Migrating from Connector/NET</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/</guid>
      <description>Migrating from Connector/NET Connection String Differences MySqlConnector has some different default connection string options:
 Option MySqlConnector Oracle’s Connector/NET Notes   AllowPublicKeyRetrieval Default is false (not configurable) When using sha256_password authentication, this option allows the RSA public key to be retrieved from the server (when not using a secure connection). It’s false by default to avoid disclosing the password to a malicious proxy.   CharacterSet, CharSet Ignored; utf8mb4 is always used (server-defined) MySqlConnector always uses utf8mb4 to send and receive strings from MySQL Server.</description>
    </item>
    
    <item>
      <title>Use with .NET Core MVC</title>
      <link>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/tutorials/net-core-mvc/</guid>
      <description>Use with .NET Core MVC 2.0 This tutorial will walk through a basic .NET Core JSON API application that performs CRUD operations on blog posts. The code in this tutorial comes is an adaptation of MySqlConnector.Performance, the performance application that is used to stress test MySqlConnector.
Initialize MySQL Create a MySQL database and copy the following SQL to create a table called BlogPost:
CREATE TABLE IF NOT EXISTS `BlogPost` ( `Id` int(11) NOT NULL AUTO_INCREMENT, `Content` longtext, `Title` longtext, PRIMARY KEY (`Id`) ) ENGINE=InnoDB;  Initialize .</description>
    </item>
    
  </channel>
</rss>