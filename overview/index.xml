<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview on MySqlConnector: Async MySQL Driver for .NET and .NET Core</title>
    <link>https://mysql-net.github.io/MySqlConnector/overview/</link>
    <description>Recent content in Overview on MySqlConnector: Async MySQL Driver for .NET and .NET Core</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mysql-net.github.io/MySqlConnector/overview/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/installing/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/installing/</guid>
      <description>Installing The recommended way of installing MySqlConnector is through NuGet.
Automatically If using the new project system, run: dotnet add package MySqlConnector
Or, in Visual Studio, use the NuGet Package Manager to browse for and install MySqlConnector.
Manually Step 1: Add MySqlConnector to the dependencies in your csproj file:
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;AssemblyTitle&amp;gt;My Application&amp;lt;/AssemblyTitle&amp;gt; &amp;lt;Description&amp;gt;A great application&amp;lt;/Description&amp;gt; &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt; &amp;lt;TargetFramework&amp;gt;netcoreapp2.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;ItemGroup&amp;gt; &amp;lt;PackageReference Include=&amp;quot;MySqlConnector&amp;quot; Version=&amp;quot;0.30.0&amp;quot; /&amp;gt; &amp;lt;/ItemGroup&amp;gt; &amp;lt;/Project&amp;gt;  Step 2: Run the command dotnet restore</description>
    </item>
    
    <item>
      <title>DbProviderFactories</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/dbproviderfactories/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/dbproviderfactories/</guid>
      <description>Using DbProviderFactories MySqlConnector can be registered with DbProviderFactories and obtained via DbProviderFactories.GetFactory(MySqlClientFactory.InvariantName), or by using the methods described here.
.NET Framework For .NET Framework applications, add the following section to your app.config or web.config:
&amp;lt;system.data&amp;gt; &amp;lt;DbProviderFactories&amp;gt; &amp;lt;add name=&amp;quot;MySqlConnector&amp;quot; invariant=&amp;quot;MySqlConnector&amp;quot; description=&amp;quot;Async MySQL ADO.NET Connector&amp;quot; type=&amp;quot;MySql.Data.MySqlClient.MySqlClientFactory, MySqlConnector, Culture=neutral, PublicKeyToken=d33d3e53aa5f8c92&amp;quot; /&amp;gt; &amp;lt;/DbProviderFactories&amp;gt; &amp;lt;/system.data&amp;gt;  .NET Core For .NET Core 2.1 or later, call MySqlClientFactory.Register() during application startup. This will register MySqlConnector&amp;rsquo;s DbProviderFactory implementation in the central DbProviderFactories registry.</description>
    </item>
    
    <item>
      <title>Known Issues</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/known-issues/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/known-issues/</guid>
      <description> Known Issues  Prepared statements are not supported: #397. Some MySql.Data connection string settings are not supported by this library. See Connection Options for a list of supported options.  </description>
    </item>
    
    <item>
      <title>Version History</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/version-history/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/version-history/</guid>
      <description>Version History 0.51.1  Add support for Memory&amp;lt;byte&amp;gt; and ArraySegment&amp;lt;byte&amp;gt; as MySqlParameter.Value values. Fix exception when setting MySqlParameter.Value to ReadOnlyMemory&amp;lt;byte&amp;gt; when using prepared commands.  0.51.0  Set MySqlException.Number to MySqlErrorCode.UnableToConnectToHost in more situations when connecting times out: #622. Improve handling of MySqlConnection.Close() within TransactionScope: #620. Allow MySqlParameter.Value to be a ReadOnlyMemory&amp;lt;byte&amp;gt;: #624. Thanks to mguinness for contributions to this release.  0.50.0  Add MySqlClientFactory.Register() for integration with DbProviderFactories in netcoreapp2.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/configuration/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/configuration/</guid>
      <description>Configuration MySqlConnector uses a connection string in order to connect to your database.
To connect to a database on localhost port 3306 with a user mysqltest, password Password123, and default schema mysqldb, the connection string would be:
host=127.0.0.1;port=3306;user id=mysqltest;password=Password123;database=mysqldb;
For all connection string options, view the Connection Options Reference
Application Database Object Example It&amp;rsquo;s a good idea to use an IDisposable object that configures the connection string globally, and closes the connection automatically:</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/logging/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/logging/</guid>
      <description>Logging MySqlConnector implements a custom logging framework with the IMySqlConnectorLogger and IMySqlConnectorLoggerProvider interfaces. To connect MySqlConnector to an existing logging framework, write an implementation of IMySqlConnectorLoggerProvider that adapts the existing logging framework, and install it by setting MySqlConnector.Logging.MySqlConnectorLogManager.Provider = provider;.
The MySqlConnectorLogManager.Provider property may only be set once, and must be set before any other MySqlConnector library methods are called.
Debug-level logging is useful for diagnosing problems with MySqlConnector itself; it is recommend that applications limit MySqlConnector logging to Info or higher.</description>
    </item>
    
    <item>
      <title>Use with ORMs</title>
      <link>https://mysql-net.github.io/MySqlConnector/overview/use-with-orms/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mysql-net.github.io/MySqlConnector/overview/use-with-orms/</guid>
      <description> Use with ORMs This library is compatible with popular .NET ORMs including:
 Dapper (GitHub, NuGet) NReco.Data (GitHub, NuGet) Paradigm ORM (GitHub, NuGet) ServiceStack.OrmLite (GitHub, NuGet) SimpleStack.Orm (GitHub, NuGet)  For Entity Framework support, use:
 Pomelo.EntityFrameworkCore.MySql (GitHub, NuGet)  </description>
    </item>
    
  </channel>
</rss>